import json
from llmpipe.modules import DocumentChunker, ConvertListToJson
from llmpipe import LlmPrompt, LlmPromptForMany, Input, Output


with open("experiments/tutorials/diataxis_tutorials_guidelines.txt", "r") as fin:
    document = fin.read()

# chunker = DocumentChunker()
# sections = chunker(document=guide)

# with open("experiments/tutorials/guidelines_chunked.jsonl", "w") as fout:
#     fout.write("\n".join([json.dumps(section) for section in sections]))

# outline = ""
# for section in sections:
#     if section["document"] == section["section"] == section["subsection"]:
#         outline += section["document"] + "\n"
#     elif section["section"] == section["subsection"]:
#         outline += "- " + section["section"] + "\n"
#     else:
#         outline += "  - " + section["subsection"] + "\n"
# print(outline)


# guide = Input("guide", "A guide for writing tutorials")
# cot = Output("thinking", "Begin by thinking step by step")
# rubrik = Output(
#     "rubrik", "An evaluation rubrik for an outline of a tutorial on a data science or coding topic", 
#     inputs=[guide], 
#     evaluations=[
#         {"type": "llm", "value": "Does not include requirements related to external references, links, or citations"}, 
#         {"type": "llm", "value": "Does not include requirements related to prerequisites or scope or time to complete"}
#     ]
# )
# details = """\
# The rubrik should provide a checklist that enables identification of high quality tutorial outlines. The rubrik should be a  flat list consisting of requirements and success criteria. Each item should start with an imperative sentence beginning with a verb or verb phrase (e.g., contains, addresses, has, provides, etc.). After, provide additional detail and examples as needed to help an evaluator perform the evaluation."""

# prompt = LlmPrompt(
#     task="Using the provided guide, create an evaluation rubrik for generating high-quality outlines for data science and coding tutorials", 
#     details=details, 
#     inputs=rubrik.inputs, 
#     outputs=[cot, rubrik]
# )

# response = prompt(guide=document)
# print(response["thinking"])
# print(response["rubrik"])

# list_converter = ConvertListToJson()
# rubrik = list_converter(response["rubrik"])

# with open("experiments/tutorials/outline_rubrik.json", "w") as fout:
#     json.dump(rubrik, fout)

with open("experiments/tutorials/outline_rubrik.json", "r") as fin:
    rubrik = json.load(fin)

topic = Input("topic", "A topic for a data science or coding tutorial")
outline_evals = [{"type": "llm", "value": x} for x in rubrik]
outline = Output(
    "outline", "An outline for a data science or coding tutorial", 
    inputs=[topic], 
    evaluations=outline_evals
)
prompt2 = LlmPrompt(
    task="Write an outline for a tutorial on the provided topic", 
    inputs=outline.inputs, 
    outputs=[cot, outline]
)

inputs = {"topic": "Linear Regression Assumptions"}
response = prompt2(**inputs)
print(response["outline"])
revised_response = prompt2.revise(**(inputs | response))
print(revised_response["outline"])